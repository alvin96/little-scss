// Prefix
@mixin prefix($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
        #{"-" + $prefix + "-" + $property}: $value;
    }
    #{$property}: $value;
}

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie);
}

// Background gradient
@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    } @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

// Media Queries
// A map of screen breakpoints
$breakpoints: (
        xs: 0,
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1200px,
);

@mixin screen-above($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @error 'Invalid breakpoint "#{$breakpoint}".';
    }
}

@mixin screen-below($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }
    } @else {
        @error 'Invalid breakpoint "#{$breakpoint}".';
    }
}

@mixin screen-between($min, $max) {
    @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
        $min-breakpoint: map-get($breakpoints, $min);
        $max-breakpoint: map-get($breakpoints, $max);
        @if ($min-breakpoint > $max-breakpoint) {
            @error 'Your min breakpoint is greater than max breakpoint.';
        } @else if ($min-breakpoint == $max-breakpoint) {
            @error 'Your min breakpoint and max breakpoint cannot be same.';
        } @else {
            @media (min-width: $min-breakpoint) and (max-width: ($max-breakpoint - 1)) {
                @content;
            }
        }

    } @else {
        @if (map-has-key($breakpoints, $min) == false and map-has-key($breakpoints, $max) == false) {
            @error 'Your min breakpoint "#{$min}" and max breakpoint "#{$max}" was invalid.';
        } @else if (map-has-key($breakpoints, $min) == false) {
            @error 'Your min breakpoint "#{$min}" was invalid.';
        } @else if (map-has-key($breakpoints, $max) == false) {
            @error 'Your max breakpoint "#{$max}" was invalid.';
        }
    }
}